type R = [16]
type T = [16]
type F = [32] // Fixed point
type D = [64] // Double Fixed point - used for mul and div

_T = [0 .. 22049]:[_]T

pi_sa = join [0:R, 9:R]

///// Improve these fixed point math functions
tof : R -> F
tof a = join [a, 0:R]

round : F -> R
round a = (split a : [2]R) @ 0 // Round here

trunc : F -> R
trunc a = (split a : [2]R) @ 0

fract : F -> R
fract a = (split a : [2]R) @ 1

tod : F -> D
tod a = join [0:F, a]

todd : F -> D
todd a = join [a, 0:F]

truncd : D -> F
truncd a = (split a : [2]F) @ 0

fractd : D -> F
fractd a = (split a : [2]F) @ 1

roundd : D -> F
roundd a = join [fract(truncd(a)), trunc(fractd(a))] // Round here

mul : (F, F) -> F
mul (a, b) = roundd(tod(a) * tod(b))

div : (F, F) -> F
div (a, b) = roundd(todd(a) / tod(b))

mdf : {n} (fin n) => (F, [n]R) -> F
mdf (a, b) = ys ! 0
    where ys = [a] # [ mul(div(a, tof(x)), y) | x <- b
                                               | y <- ys
                     ]

// Extremely approximate sin
sin : F -> F
sin x = x - mdf(x, [2..3]) + mdf(x, [2..5]) - mdf(x, [2..7])
///// 

///// Audio code here:
//y(t)=Asin(2pft+o)

channel : T -> R
channel t = round(mul(sin(mul(tof(t % 22050), pi_sa)), tof(0x7FFF)))

sample : T -> [2][8]
//sample t = join [ split (channel t) : [2][8], split (channel (t + 5512)) : [2][8] ]
sample t = split (channel t) : [2][8]

// intput to main = array of music notes? for left and right based on selecting via time
track : R -> [22050][2][8]
track f = [ sample ((f * 22049) + k) | k <- _T ]
