type R = [16]
type T = [16]
type F = [32] // Fixed point
type D = [64] // Double Fixed point - used for mul and div

_T = [0 .. 22049]:[_]T

pi_sa = join [0:R, 9:R]

///// Improve these fixed point math functions
tof : R -> F
tof a = join [a, 0:R]

round : F -> R
round a = (split a : [2]R) @ 0 // Round here

trunc : F -> R
trunc a = (split a : [2]R) @ 0

fract : F -> R
fract a = (split a : [2]R) @ 1

tod : F -> D
tod a = join [0:F, a]

todd : F -> D
todd a = join [a, 0:F]

truncd : D -> F
truncd a = (split a : [2]F) @ 0

fractd : D -> F
fractd a = (split a : [2]F) @ 1

roundd : D -> F
roundd a = join [fract(truncd(a)), trunc(fractd(a))] // Round here

mul : (F, F) -> F
mul (a, b) = roundd(tod(a) * tod(b))

div : (F, F) -> F
div (a, b) = roundd(todd(a) / tod(b))

mdf : {n} (fin n) => (F, [n]R) -> F
mdf (a, b) = ys ! 0
    where ys = [a] # [ mul(div(a, tof(x)), y) | x <- b
                                              | y <- ys
                     ]

// Extremely approximate +ve sin
_sin : F -> F
_sin x = x - mdf(x, [2..3]) + mdf(x, [2..5]) - mdf(x, [2..7])

to_rad : R -> F
to_rad r = mul(tof(r), pi_sa)

to_sshort : F -> R
to_sshort f = round(mul(f, tof(0x7FFF)))
/////

///// Audio code here:
//y(t) = Asin(2pft+o)

// Used to keep t in 0 <= x < 22050 range, 1 = pi/22050
mma : (T, R, R) -> T 
mma (t, f, o) = (2 * t * f + o) % 22050 

// Mess due to overflowing 16bits
mma2 : (T, R, R) -> T
mma2 (t, f, o) = (t * f + o) % 22050  

// a = 1/A
//square_wave : R -> T -> R -> R -> R
//square_wave a t f o = 

// Use square wave here?
fix_amp : (R, R, T) -> R
fix_amp (w, a, t) = if (t >= 11025) then (w * 0xFFFF) / a else w / a

// a = 1/A
// _sin currently only "works" for 0 <= x < pi so x >= pi needs to be flipped (after rounding)
sin_wave : R -> T -> R -> R -> R
sin_wave a t f o = fix_amp(to_sshort(_sin(to_rad(mma(t, f ,o)))), a, mma2(t, f, o))

channel_volume : T -> R -> R
channel_volume t r = if ((t % 5512) > r) then 0x7FFF else 1

channel : [3]R -> T -> R
channel fo t = sin_wave (channel_volume t (fo @ 2)) t (fo @ 0) (fo @ 1)

quarter_sample : ([2][3]R, T) -> [4][8]
quarter_sample (lr, t) = join [ split (channel (lr @ 0) t) : [2][8], split (channel (lr @ 1) t) : [2][8] ]

half_sample : ([2][2][3]R, T) -> [4][8]
half_sample (lr, t) = if ((t % 11025) >= 5512) then quarter_sample((lr @ 1), t) else quarter_sample((lr @ 0), t)

sample : [4][2][3]R -> T -> [4][8]
sample lr t = if ((t % 22050) >= 11025) then half_sample((lr @@ ([2, 3]:[_]R)), t) else half_sample((lr @@ ([0, 1]:[_]R)), t)

track : {n} (fin n) => [n][4][2][3]R -> [n][22050][4][8]
track lr = [ [ sample lr2 k | k <- _T ] | lr2 <- lr ] 
